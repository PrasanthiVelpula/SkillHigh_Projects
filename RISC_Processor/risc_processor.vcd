$date
	Sat Aug 02 23:16:30 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module risc_processor_tb $end
$var wire 4 ! R0 [3:0] $end
$var wire 4 " R1 [3:0] $end
$var wire 4 # R2 [3:0] $end
$var wire 4 $ R3 [3:0] $end
$var wire 4 % alu_result [3:0] $end
$var wire 8 & ins_out [7:0] $end
$var reg 1 ' clk $end
$scope module uut $end
$var wire 4 ( R0 [3:0] $end
$var wire 4 ) R1 [3:0] $end
$var wire 4 * R2 [3:0] $end
$var wire 4 + R3 [3:0] $end
$var wire 4 , alu_result [3:0] $end
$var wire 1 - clk $end
$var wire 8 . ins_out [7:0] $end
$var wire 8 / instruction [7:0] $end
$var wire 4 0 opcode [3:0] $end
$var wire 2 1 rd [1:0] $end
$var wire 4 2 rd_data [3:0] $end
$var wire 2 3 rs [1:0] $end
$var wire 4 4 rs_data [3:0] $end
$var wire 1 5 write_enable $end
$var reg 4 6 pc [3:0] $end
$scope module mem $end
$var wire 4 7 address [3:0] $end
$var reg 8 8 instruction [7:0] $end
$upscope $end
$scope module cu $end
$var wire 8 9 instruction [7:0] $end
$var wire 4 : opcode [3:0] $end
$var wire 2 ; rd [1:0] $end
$var wire 2 < rs [1:0] $end
$upscope $end
$scope module RF $end
$var wire 4 = R0 [3:0] $end
$var wire 4 > R1 [3:0] $end
$var wire 4 ? R2 [3:0] $end
$var wire 4 @ R3 [3:0] $end
$var wire 1 - clk $end
$var wire 2 A rd_addr [1:0] $end
$var wire 4 B rd_data [3:0] $end
$var wire 2 C rs_addr [1:0] $end
$var wire 4 D rs_data [3:0] $end
$var wire 4 E write_data [3:0] $end
$var wire 1 5 write_enable $end
$upscope $end
$scope module alu $end
$var wire 4 F a [3:0] $end
$var wire 4 G b [3:0] $end
$var wire 4 H opcode [3:0] $end
$var reg 4 I result [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 I
b0 H
b10 G
b10 F
b0 E
b10 D
b0 C
b10 B
b0 A
b1 @
b0 ?
b1000 >
b10 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
05
b10 4
b0 3
b10 2
b0 1
b0 0
b0 /
b0 .
0-
b0 ,
b1 +
b0 *
b1000 )
b10 (
0'
b0 &
b0 %
b1 $
b0 #
b1000 "
b10 !
$end
#5
b1001 I
b1001 %
b1001 ,
b1001 E
15
b11 0
b11 :
b11 H
b1 2
b1 B
b1 F
b11 1
b11 ;
b11 A
b1000 4
b1000 D
b1000 G
b1 3
b1 <
b1 C
b111101 8
b111101 /
b111101 9
b111101 &
b111101 .
b1 6
b1 7
1'
1-
#10
0'
0-
#15
b10 0
b10 :
b10 H
b10 1
b10 ;
b10 A
b10 4
b10 D
b10 G
b0 3
b0 <
b0 C
b101000 8
b101000 /
b101000 9
b101000 &
b101000 .
b10 I
b10 %
b10 ,
b10 E
b10 6
b10 7
b0 2
b0 B
b0 F
b1001 $
b1001 +
b1001 @
1'
1-
#20
0'
0-
#25
b1010 I
b1010 %
b1010 ,
b1010 E
b1 0
b1 :
b1 H
b1000 4
b1000 D
b1000 G
b1 3
b1 <
b1 C
b11001 8
b11001 /
b11001 9
b11001 &
b11001 .
b10 2
b10 B
b10 F
b10 #
b10 *
b10 ?
b11 6
b11 7
1'
1-
#30
0'
0-
#35
b100 0
b100 :
b100 H
b11 1
b11 ;
b11 A
b1001101 8
b1001101 /
b1001101 9
b1001101 &
b1001101 .
b1000 I
b1000 %
b1000 ,
b1000 E
b100 6
b100 7
b1001 2
b1001 B
b1001 F
b1010 #
b1010 *
b1010 ?
1'
1-
#40
0'
0-
#45
b1010 I
b1010 %
b1010 ,
b1010 E
b101 0
b101 :
b101 H
b1 1
b1 ;
b1 A
b10 4
b10 D
b10 G
b0 3
b0 <
b0 C
b1010100 8
b1010100 /
b1010100 9
b1010100 &
b1010100 .
b1000 2
b1000 B
b1000 F
b1000 $
b1000 +
b1000 @
b101 6
b101 7
1'
1-
#50
0'
0-
#55
b0 I
b0 %
b0 ,
b0 E
b110 0
b110 :
b110 H
b1010 4
b1010 D
b1010 G
b1 3
b1 <
b1 C
b1100101 8
b1100101 /
b1100101 9
b1100101 &
b1100101 .
b110 6
b110 7
b1010 2
b1010 B
b1010 F
b1010 "
b1010 )
b1010 >
1'
1-
#60
0'
0-
#65
05
b0 0
b0 :
b0 H
b0 3
b0 <
b0 C
b100 8
b100 /
b100 9
b100 &
b100 .
b0 2
b0 B
b0 F
b10 4
b10 D
b10 G
b0 "
b0 )
b0 >
b111 6
b111 7
1'
1-
#70
0'
0-
#75
x5
bx 0
bx :
bx H
bx 2
bx B
bx F
bx 1
bx ;
bx A
bx 4
bx D
bx G
bx 3
bx <
bx C
bx 8
bx /
bx 9
bx &
bx .
b1000 6
b1000 7
1'
1-
#80
0'
0-
#85
b1001 6
b1001 7
1'
1-
#90
0'
0-
#95
b1010 6
b1010 7
1'
1-
#100
0'
0-
